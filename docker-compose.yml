services:
  back-end:
    build:
      context: ./Application/back-end/
      dockerfile: Dockerfile
    expose:
      - 8000
    volumes:
      - ./Application/back-end:/Application/back-end
    command: sh -c "
      python manage.py migrate && python manage.py collectstatic --no-input &&
      gunicorn RuVideo.wsgi:application --bind 0.0.0.0:8000"
    depends_on:
      - redis
      - database
    environment:
      - DB_HOST=database
      - DB_NAME=${POSTGRES_DB}
      - DB_USER=${POSTGRES_USER}
      - DB_PASSWORD=${POSTGRES_PASSWORD}

  redis:
    image: redis:7.4.0-alpine
    hostname: redis

  worker:
    build:
      context: ./Application/back-end/
      dockerfile: Dockerfile
    hostname: worker
    command: celery -A RuVideo.celery_app.app worker --loglevel=info
    volumes:
      - ./Application/back-end:/Application/back-end
    links:
      - redis
    depends_on:
      - redis
      - database
    environment:
      - DB_HOST=database
      - DB_NAME=${POSTGRES_DB}
      - DB_USER=${POSTGRES_USER}
      - DB_PASSWORD=${POSTGRES_PASSWORD}

  database:
    image: postgres:17.4-alpine
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}


  front-end:
    build:
      context: ./Application/front-end/
      dockerfile: Dockerfile
    expose:
      - 5173
    volumes:
      - ./Application/front-end/src:/Application/front-end/src
      - ./Application/front-end/public:/Application/front-end/public
      - ./Application/front-end/index.html:/Application/front-end/index.html
    command: yarn run dev --host
    depends_on:
      - back-end


  nginx:
    restart: always
    build:
      context: ./Application/nginx/
      dockerfile: Dockerfile
    ports:
      - 80:80
      - 443:443
    depends_on:
      - back-end
      - front-end
    volumes:
      - ./Application/back-end/static:/usr/local/nginx/static
      - ./Application/back-end/media:/usr/local/nginx/media
